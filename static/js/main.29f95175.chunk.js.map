{"version":3,"sources":["Components/Nav/nav.js","Components/Hero/hero.js","Components/small-cards/small-cards.js","Components/Nav/footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","id","src","alt","React","Component","Hero","_ref","data","articles","slice","console","log","map","item","className","urlToImage","title","description","href","url","SmallPost","Footer","App","state","news","_this2","this","fetch","then","res","json","setState","catch","err","Nav_nav","Hero_hero","small_cards_small_cards","Nav_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sUAiBeA,gMAZP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACJH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,QAAqBH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAeC,IAAI,kGAAkGC,IAAI,KAAtJ,mBANNC,IAAMC,YCoCTC,SAnCF,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAENC,EAAWD,EAAKE,MAAM,EAAG,GAI/B,OAHAC,QAAQC,IAAIH,GAKRX,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAEHO,EACGV,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACHQ,EAASI,IAAI,SAACC,GAAD,OAEVhB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAEJH,EAAAC,EAAAC,cAAA,OAAKe,UAAU,UAAUb,IAAKY,EAAKE,aACnClB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACRH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,eAAea,EAAKG,OAC3BnB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,qBAAqBa,EAAKI,cAEhCpB,EAAAC,EAAAC,cAAA,KAAGmB,KAAML,EAAKM,KAAd,iBAIV,QCYHC,SArCG,SAAAd,GAAc,IAAXC,EAAWD,EAAXC,KACXC,EAAWD,EAAKE,MAAM,EAAG,IAI3B,OAHJC,QAAQC,IAAIH,GAIPX,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAEHO,EACEV,EAAAC,EAAAC,cAAA,OAAKe,UAAU,iBAEVN,EAASI,IAAI,SAACC,GAAD,OACVhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,YAEXjB,EAAAC,EAAAC,cAAA,KAAGmB,KAAML,EAAKM,KACVtB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,SAASb,IAAKY,EAAKE,cAGlClB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACRH,EAAAC,EAAAC,cAAA,KAAGmB,KAAML,EAAKM,KACVtB,EAAAC,EAAAC,cAAA,MAAIC,GAAG,SAASa,EAAKG,aAUvC,QCrBHK,0LARP,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACJH,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,wBAAR,wBAJVf,IAAMC,YC4CZkB,6MApCbC,MAAQ,CACNC,KAAM,uFAIY,IAAAC,EAAAC,KAClBC,MAAM,oGACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAArB,GACJG,QAAQC,IAAIJ,EAAKC,UACjBiB,EAAKM,SAAS,CAAEP,KAAMjB,EAAKC,aAG5BwB,MAAM,SAAAC,GACLvB,QAAQC,IAAIsB,sCAKhB,OACEpC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAENH,EAAAC,EAAAC,cAACmC,EAAD,MAEArC,EAAAC,EAAAC,cAACoC,EAAD,CAAM5B,KAAMmB,KAAKH,MAAMC,OAEvB3B,EAAAC,EAAAC,cAACqC,EAAD,CAAWpC,GAAG,aAAaO,KAAMmB,KAAKH,MAAMC,OAC5C3B,EAAAC,EAAAC,cAACsC,EAAD,eA9BQlC,IAAMC,WCGJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.29f95175.chunk.js","sourcesContent":["import React from 'react';\nimport './nav.css'\n\nclass Nav extends React.Component {\n    render() {\n        return (\n            <div id='container'>\n                <nav id='nav'>\n                    <div id='tagline'>\n                        <h1 id='slogan'>Daily<img id=\"trumpClipart\" src=\"https://www.trzcacak.rs/myfile/detail/5-50786_angry-trump-clipart-donald-trump-face-clipart.png\" alt=\"\"></img>Trump</h1>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default Nav;","import React from 'react';\nimport './hero.css'\n\n\nconst Hero = ({ data }) => {\n\n    const articles = data.slice(0, 3)\n    console.log(articles)\n\n\n    return (\n\n        <div id='herocontainer'>\n\n            {data ?\n                <div id=\"hello\">\n                    {articles.map((item) => (\n\n                        <div id=\"articles\">\n\n                            <img className=\"topNews\" src={item.urlToImage} />\n                            <div id=\"topNewsText\">\n                            <h1 id=\"headerTitle\">{item.title}</h1>\n                            <p id=\"headerDescription\">{item.description}</p>\n                            </div>\n                            <a href={item.url}>Read More</a>\n                        </div>\n                    ))}\n                </div>\n                : null}\n\n        </div>\n    )\n\n}\n\n\n\n\nexport default Hero;","import React from 'react'\nimport './small-cards.css'\n\n//passed the data down form app.js\nconst SmallPost = ({ data }) => {\n    const articles = data.slice(3, 20)\n    console.log(articles)\n\n\n        return (\n         <div id=\"smallPosts\">\n         {/* going through the data, mapping through each item  */}\n            { data ? \n                <div className=\"smallArticles\">\n                    \n                    {articles.map((item) => (\n                        <div className='cardCont'>\n                            \n                            <a href={item.url}>\n                                <img className=\"images\" src={item.urlToImage}/>\n                                </a>\n                            \n                                <div id=\"cardTitle\">\n                                <a href={item.url}>\n                                    <h1 id=\"title\">{item.title}</h1>\n                                    </a>\n                                </div>\n                                {/* <div>\n\n                                    <p>{item.url}</p>\n                                    </div> */}\n                        </div>\n                    ))}\n                </div>\n                : null}\n        </div>\n\n    )\n}\n\n\nexport default SmallPost;\n","import React from 'react';\nimport './footer.css'\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <div id='footer'>\n                <h6>Powered by <a href=\"https://newsapi.org/\">NewsAPI.org</a></h6>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav/nav'\nimport Hero from './Components/Hero/hero'\nimport SmallPost from './Components/small-cards/small-cards'\nimport Footer from './Components/Nav/footer'\n// const newsApi = 'https://newsapi.org/v2/top-headlines?sources=bbc-news&apiKey=5966ca7879d14c3987a7104d14a0ed0f'\n\n\nclass App extends React.Component {\n\n  state = {\n    news: []\n\n  }\n\n  componentDidMount() {\n    fetch(\"https://newsapi.org/v2/top-headlines?language=en&q=trump&apiKey=5966ca7879d14c3987a7104d14a0ed0f\")\n      .then(res => res.json())\n      .then(data => {\n        console.log(data.articles)\n        this.setState({ news: data.articles })\n\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"header\">\n\n          <Nav />\n\n          <Hero data={this.state.news} />\n          {/* addded small posts card (has its own css file) */}\n          <SmallPost id=\"smallPosts\" data={this.state.news} />\n          <Footer />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}